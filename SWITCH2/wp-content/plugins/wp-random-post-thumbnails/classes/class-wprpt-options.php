<?php/** * Class WPRPT_Options * * Creates a settings page for the options available for this plugin. * * @uses https://github.com/WebDevStudios/Custom-Metaboxes-and-Fields-for-WordPress * @see https://github.com/WebDevStudios/Custom-Metaboxes-and-Fields-for-WordPress/wiki/Using-CMB-to-create-an-Admin-Theme-Options-Page */class WPRPT_Options {	/**	 * Generic prefix for fields and stuff	 * @var string	 */	private $prefix = 'wprpt';	/**	 * Option key, and option page slug	 * @var string	 */	private $key = 'wprpt_options';	/**	 * Options Page title	 * @var string	 */	protected $title = '';	/**	 * Menu Item Title	 * @var string	 */	protected $menu_title = '';	/**	 * Array of tabs that house the metaboxes	 * @var array	 */	protected $tabs = array();	/**	 * Array of all metaboxes for this options page	 * @var array	 */	protected $boxes = array();	/**	 * Constructor	 * @since 1.0.0	 */	public function __construct() {				// Set our title		$this->title = __( 'Random Post Thumbnails', $this->prefix );		// Set our menu link title		$this->menu_title = __( 'Random Thumbnails', $this->prefix );			}		/**	 * Initiate our hooks	 *	 * @since 1.0.0	 *	 * @param none	 * @return null	 */	public function hooks() {				add_action( 'admin_init', array( $this, 'init' ) );		add_action( 'cmb2_admin_init', array( $this, 'add_options_page_tabs' ) );		add_action( 'cmb2_admin_init', array( $this, 'add_options_page_metaboxes' ) );		add_action( 'cmb2_admin_init', array($this, 'create_options_page') );		add_action( 'cmb2_before_form', array($this, 'change_taxonomy_option_slug_value_to_id' ), 10, 4 );	}	/**	 * Register our setting to WP	 *	 * @since 1.0.0	 *	 * @param none	 * @return null	 */	public function init() {		register_setting( $this->key, $this->key );	}	/**	 * Creates our options page, adds it to the menu, and controls the output	 * of our defined tabs and metaboxes.	 *	 * @since 2.0.0	 *	 * @param none	 * @return null	 */	function create_options_page() {		// use CMO filter to add an intro at the top of the options page		add_filter( 'cmb2metatabs_before_form', array($this, 'add_options_page_description') );		// configuration array		$args = array(			'key'      => $this->key,			'title'    => $this->title,			'topmenu'  => 'options-general.php',			'cols'     => 1,			'boxes'    => $this->boxes,			'tabs'     => $this->tabs,			'menuargs' => array(				'menu_title' => $this->menu_title,			),		);		// create the options page		new Cmb2_Metatabs_Options( $args );	}	/**	 * Outputs the options page description, which is shown underneath the	 * page title.	 *	 * @since 2.0.0	 *	 * @param none	 * @return string	 */	function add_options_page_description() {		return '<p>The Random Post Thumbnails plugin allows you to upload photos that will be displayed at random as the featured image of any post without an image. This is useful if your theme requires that each post have a featured image.</p>';	}	/**	 * Add some tabs and associate metaboxes to go in each tab.	 *	 * @since 2.0.0	 *	 * @param none	 * @return array	 */	function add_options_page_tabs() {		$global_options = array(			'id'    => 'global',			'title' => 'Global Options',			'desc' => '',			'boxes' => array(				'global_options'			)		);		$post_type_options = array(			'id'    => 'post_type',			'title' => 'Post Type Options',			'desc' => '',		);		$taxonomy_options = array(			'id'    => 'taxonomy',			'title' => 'Taxonomy Options',			'desc' => '',		);		$post_types = wprpt_get_public_post_types();		// Taxonomy specific options		foreach( $post_types as $slug => $post_type ) {			$taxonomy_objects = get_object_taxonomies( $slug, 'objects' );			$post_type_options['boxes'][] = "post_type_{$slug}_options";			foreach ( $taxonomy_objects as $taxonomy_slug => $taxonomy_object ) {				$taxonomy_options['boxes'][] = "taxonomy_{$taxonomy_object->name}_options";			}		}		$this->tabs = array( $global_options, $post_type_options, $taxonomy_options );		return $this->tabs;	}	/**	 * Adds our options page metaboxes to the $boxes class variable.	 *	 * @since 2.0.0	 *	 * @param none	 * @return array	 */	public function add_options_page_metaboxes() {		// Variables used throughout the function		$post_types = wprpt_get_public_post_types();		$show_on = array(			'key'   => 'options-page',			'value' => array( $this->key ),		);		// Global Options Box		$global_options = new_cmb2_box( array(			'id'         => 'global_options',			'title'      => 'Global Options',			'show_on'    => $show_on		) );		// General images field		$global_options->add_field( array(			'name'      => __( 'Images', $this->prefix ),			'desc'      => __( 'a variety of images to be shown at random for each post without a featured image.', $this->prefix ),			'id'        => 'images',			'type'      => 'file_list',		) );		// Post types field		$selected_post_types = array();		foreach($post_types as $slug => $post_type) {			$selected_post_types[ $slug ] = $post_type->labels->singular_name;		}		$global_options->add_field( array(			'name'      => 'Post Types',			'desc'      => 'Select the post types you\'d like to use the global images for.',			'id'        => 'selected_post_types',			'type'      => 'multicheck',			'options'   => $selected_post_types,		) );		// Set the object type and add the box to our array		$global_options->object_type( 'options-page' );		$this->boxes[] = $global_options;		// Taxonomy & Post Type specific options		foreach( $post_types as $post_type_slug => $post_type ) {			$taxonomy_objects = get_object_taxonomies( $post_type_slug, 'objects' );			// Metabox for the taxonomy options			$post_type_options = new_cmb2_box( array(				'id'         => "post_type_{$post_type_slug}_options",				'title'      => $post_type->labels->singular_name . ' Images',				'show_on'    => $show_on,				'closed'     => true,			) );			// Group field that houses our repeatable fields			$post_type_options->add_field( array(				'id'          => "{$post_type_slug}_images",				'type'        => 'file_list',				'description' => "Set images to be used for '{$post_type_slug}' posts.",			) );			// Set the object type and add the metabox to our array of boxes			$post_type_options->object_type( 'options-page' );			$this->boxes[] = $post_type_options;			foreach($taxonomy_objects as $taxonomy_slug => $taxonomy_object) {				// Metabox for the taxonomy options				$taxonomy_options = new_cmb2_box( array(					'id'         => "taxonomy_{$taxonomy_object->name}_options",					'title'      => $taxonomy_object->labels->singular_name . ' Images',					'show_on'    => $show_on,					'closed'     => true,				) );				// Group field that houses our repeatable fields				$taxonomy_options->add_field( array(					'id'          => "taxonomy_{$taxonomy_object->name}_term_images",					'type'        => 'group',					'description' => "Set images to be used for '{$post_type_slug}' posts in each term in the {$taxonomy_object->label} taxonomy.",					// 'repeatable'  => false, // use false if you want non-repeatable group					'options'     => array(						'group_title'   => __( 'Term Image Set {#}', 'cmb2' ), // since version 1.1.4, {#} gets replaced by row number						'add_button'    => __( 'Add Another Image Set', 'cmb2' ),						'remove_button' => __( 'Remove Image Set', 'cmb2' ),					)				) );				// Term field, specifying the term to add images for				$taxonomy_options->add_group_field( "taxonomy_{$taxonomy_object->name}_term_images", array(					'name'           => 'Term',					'id'             => 'term',					'type'           => 'select',					'options'        => wprpt_get_all_terms_for_taxonomy( $taxonomy_slug ),				) );				// Images field for images specific to the selected term				$taxonomy_options->add_group_field( "taxonomy_{$taxonomy_object->name}_term_images", array(					'name' => __( 'Images', $this->prefix ),					'id'   => 'images',					'type' => 'file_list',				) );				// Set the object type and add the metabox to our array of boxes				$taxonomy_options->object_type( 'options-page' );				$this->boxes[] = $taxonomy_options;			}		}	}	/**	 * Converts any previously saved taxonomy slugs to their corresponding	 * term id value.	 *	 * In version 2.0.0, support for specifying images based on taxonomy terms	 * was added. Originally, the slug of the taxonomy term was saved in the	 * database. This caused issues with terms being in different languages	 * with different characters. To fix this, we're changing the plugin so it	 * saves the term ID instead of the slug in the database. Instead of forcing	 * users to reselect and resave all of their currently selected terms, we're	 * manually updating them silently here when the options page is initially	 * loaded.	 *	 * This function can essentially be removed in a future release when we	 * can be sure that most/all of the users have had their database values	 * converted.	 *	 * @todo Remove this and the corresponding action on line 77 in a future release of the plugin.	 *	 * @since 2.1.0	 *	 * @param $cmb_id	 * @param $object_id	 * @param $object_type	 * @param $cmb	 * @return null	 */	function change_taxonomy_option_slug_value_to_id( $cmb_id, $object_id, $object_type, $cmb ) {		// Variables used throughout the function		$post_types = wprpt_get_public_post_types();		// Loop through each post type		foreach( $post_types as $post_type_slug => $post_type ) {			$taxonomy_objects = get_object_taxonomies( $post_type_slug, 'objects' );			// Loop through each taxonomy			foreach ( $taxonomy_objects as $taxonomy_slug => $taxonomy_object ) {				// Whether we need to manually update any values				$update = false;				// Grab the current taxonomy values				$taxonomy_values = wprpt_get_option( "taxonomy_{$taxonomy_slug}_term_images" );				// Make sure we have some values to loop through				if ( !empty( $taxonomy_values) ) {					// Loop through all of the saved taxonomy values					foreach($taxonomy_values as $key => $taxonomy_item) {						// If the current value is a string, that means it's the						// slug and we need to convert it to the term ID.						if ( isset($taxonomy_item['term']) && intval($taxonomy_item['term']) === 0 ) {							$update = true;							$term = get_term_by( 'slug', $taxonomy_item['term'], $taxonomy_slug );							if ( !empty($term->term_id) ) {								$taxonomy_values[$key]['term'] = $term->term_id;							}						}					}				}				// If we need to update any values, run the update function				if ( $update === true ) {					wprpt_update_option( "taxonomy_{$taxonomy_slug}_term_images", $taxonomy_values );				}			}		}	}	/**	 * Public getter method for retrieving protected/private variables	 *	 * @since 1.0.0	 * 	 * @param  string  $field Field to retrieve	 * @return mixed          Field value or exception is thrown	 */	public function __get( $field ) {		// Allowed fields to retrieve		if ( in_array( $field, array( 'key', 'fields', 'title', 'options_page' ), true ) ) {			return $this->{$field};		}		throw new Exception( 'Invalid property: ' . $field );	}}